<?php
use App\Conversations\Test;

use BotMan\Drivers\Facebook\Extensions\ElementButton;
use BotMan\Drivers\Facebook\Extensions\ButtonTemplate;

use BotMan\BotMan\Messages\Outgoing\Question;
use BotMan\BotMan\Messages\Outgoing\Actions\Button;

$botman = resolve('botman');

$botman->hears('AMAZONAUTH', function ($bot) {
    $user = $bot->getUser();

    $bot->reply('hi');
});

$botman->hears('IndÃ­tÃ¡s', function ($bot) {
    $user = $bot->getUser();

    $bot->reply(ButtonTemplate::create('Kedves '. $user->getLastName() . ' ' . $user->getFirstName() .'!'. PHP_EOL . 
    'KÃ¶szÃ¶ntelek a kreszChat alkalmazÃ¡sban!'. PHP_EOL . 
    'A Facebook messengeren keresztÃ¼l segÃ­tek neked a kresz vizsgÃ¡ra felkÃ©szÃ¼lni, vagy a mÃ¡r meglÃ©vÅ‘ tudÃ¡sodat felfrissÃ­teni.'. PHP_EOL . 
    'Ha most vagy itt elÅ‘szÃ¶r, olvasd el a "TudnivalÃ³k" menÃ¼pontot! ðŸ˜‰')
        ->addButton(ElementButton::create('GyakorlÃ¡s')
            ->type('postback')
            ->payload('GyakorlÃ¡s')
        )
        ->addButton(ElementButton::create('Teszt vizsga')
            ->type('postback')
            ->payload('Vizsga')
        )
        ->addButton(ElementButton::create('TudnivalÃ³k')
            ->url('http://kresz.bot/')
        )
    );
});

$botman->hears('Vizsga', function ($bot) {
    $bot->userStorage()->save([
        'practice' => false
    ]);

    $bot->reply(
        'A vizsga megegyezik az Ã©les vizsga menetÃ©vel. IndÃ­tÃ¡s utÃ¡n kb. ~55 kÃ©rdÃ©st (75 pont) kell megvÃ¡laszolnod. ' . PHP_EOL . 
        'A szituÃ¡ciÃ³k Ã©s fontosabb kÃ©rdÃ©sek 3, az egyÃ©b kÃ©rdÃ©sek 1 pontot Ã©rnek.' . PHP_EOL . 
        'Minden kÃ©rdÃ©s megvÃ¡laszolÃ¡sÃ¡ra 60 mp-ed van. Amennyiben nem sikerÃ¼l ez idÅ‘ alatt vÃ¡laszolni, automatikusan hibÃ¡snak jelÃ¶ljÃ¼k!');
    $bot->typesAndWaits(3);
    $bot->reply('A kÃ©rdÃ©sek megvÃ¡laszolÃ¡sa utÃ¡n kiÃ©rtÃ©kelem a vÃ¡laszaidat Ã©s Ã¶sszesÃ­tem a pontokat. A sikeres teszthez a max 75-bÅ‘l legalÃ¡bb 65 pontra lesz szÃ¼ksÃ©ged.');
    $bot->typesAndWaits(2);
    $bot->reply(ButtonTemplate::create(
        'Sok szerencsÃ©t Ã©s sikeres vizsgÃ¡t kÃ­vÃ¡nok! ðŸ˜‡')
        ->addButton(ElementButton::create('Indulhat a teszt! ðŸ˜Ž')
            ->type('postback')
            ->payload('KategÃ³ria vÃ¡lasztÃ¡s')
        )
        ->addButton(ElementButton::create('Vissza a menÃ¼be ðŸ˜–')
            ->type('postback')
            ->payload('MenÃ¼')
        )
    );
});

$botman->hears('GyakorlÃ¡s', function ($bot) {
    $bot->userStorage()->save([
        'practice' => true
    ]);

    $bot->reply('A gyakorlÃ¡s menete a kÃ¶vetkezÅ‘; Felteszek egy kÃ©rdÃ©st amit a vÃ¡laszod utÃ¡n egybÅ‘l ki is Ã©rtÃ©kelek Ã©s megmondom, hogy helyes volt-e. Amennyiben helytelenÃ¼l vÃ¡laszolsz, azt is elÃ¡rulom, mi lett volna a helyes.');
    $bot->typesAndWaits(5);
    $bot->reply(ButtonTemplate::create(
        'Ha valamiÃ©rt nem egyÃ©rtelmÅ±, a "RÃ©szletek" gombra kattintva megprÃ³bÃ¡lom elmagyarÃ¡zni miÃ©rt az a helyes vÃ¡lasz. '. PHP_EOL . 
        'GyakorlÃ¡s kÃ¶zben nem szÃ¡molom a pontjaidat Ã©s idÅ‘korlÃ¡t sincs egy-egy kÃ©rdÃ©s megvÃ¡laszolÃ¡sÃ¡ra.'. PHP_EOL . 
        'JÃ³ tanulÃ¡st kÃ­vÃ¡nok! ðŸ˜‡')
        ->addButton(ElementButton::create('JÃ¶hetnek a kÃ©rdÃ©sek! ðŸ˜Ž')
            ->type('postback')
            ->payload('KategÃ³ria vÃ¡lasztÃ¡s')
        )
        ->addButton(ElementButton::create('Vissza a menÃ¼be ðŸ˜–')
            ->type('postback')
            ->payload('MenÃ¼')
        )
    );
});

$botman->hears('KategÃ³ria vÃ¡lasztÃ¡s', function ($bot) {
    $bot->reply(Question::create(
        'Ahhoz, hogy a megfelelÅ‘ kÃ©rdÃ©seket tudjam neked adni, vÃ¡lassz kategÃ³riÃ¡t amin belÃ¼l gyakorolni/tesztelni szeretnÃ©l.'. PHP_EOL .
        'KÃ©sÅ‘bb ezt termÃ©szetesen meg tudod majd vÃ¡ltoztatni! ðŸ˜Š')
            ->addButtons([
                Button::create('"A" kategÃ³ria')->value('"A" kategÃ³ria'),
                Button::create('"B" kategÃ³ria')->value('"B" kategÃ³ria'),
                Button::create('"C" kategÃ³ria')->value('"C" kategÃ³ria'),
                Button::create('"D" kategÃ³ria')->value('"D" kategÃ³ria'),
                Button::create('"E" kategÃ³ria')->value('"E" kategÃ³ria')
            ])
        );
});

$botman->hears('"([ABCDE])" kategÃ³ria', function ($bot, $category) {
    $user = $bot->getUser(); //User
    $userData = $bot->userStorage()->find($user->getId()); //Storage

    if($userData->get('practice')){
        $bot->reply('A(z) ' . $category . ' kategÃ³riÃ¡t vÃ¡lasztottad! JÃ³ tanulÃ¡st!');
    }else{
        $bot->reply($category . ' kategÃ³riÃ¡bÃ³l fogunk Ã¶sszeÃ¡llÃ­tani neked egy vizsgÃ¡t. Sok szerencsÃ©t kÃ­vÃ¡nunk!');
    }
    
    $bot->startConversation(new Test($category, $bot->getUser(), $bot, $userData->get('practice')));
});

$botman->hears('GyakorlÃ³ statisztika', function ($bot) {
    $user = $bot->getUser();

    $bot->reply(ButtonTemplate::create(
        'A gyakorlÃ¡said alatt Ã¶sszegyÅ±jtÃ¶tt pontok Ã¶sszesÃ­tÃ©sÃ©t az alÃ¡bbi gombra kattintva Ã©red el')
        ->addButton(ElementButton::create('Mutasd! ')
            ->url('http://botman.io/')
        )
    );
});

$botman->hears('Teszt befejezÃ©se', function ($bot) {
    $bot->reply('KÃ©rlek vÃ¡rj, az eredmÃ©nyek kiÃ©rtÃ©kelÃ©se folyamatban van..');
    $bot->typesAndWaits(5);

    $user = $bot->getUser(); //User
    $userData = $bot->userStorage()->find($user->getId()); //Storage
    $activeTestID = $userData->get('activeTestID');
    Log::channel('customlog')->info('ACTQID: ' . $activeTestID);

    DB::table('tests')->where('TestID', $activeTestID)->update([ //
            'isFinished' => true
        ]
    );

    $bot->userStorage()->save([
        'activeTestID' => NULL
    ]);      
    
    $correctPoints = DB::table('answers')->where('UserID', $user->getId())->where('TestID', $activeTestID)->where('correct', 1)->sum('points');

    if($activeTestID != NULL){ //Ha van teszt amit Ã©rtÃ©kelni lehet
        return $bot->reply(ButtonTemplate::create(
            'A ' . $activeTestID . ' szÃ¡mÃº vizsga vÃ©get Ã©rt! PontszÃ¡mod: ' . $correctPoints)
            ->addButton(ElementButton::create('Mutasd! ')
                ->url('http://kresz.bot/')
            )
        );
    }

    return $bot->reply('Jelenleg nincs aktÃ­v teszted, amit kiÃ©rtÃ©kelhetnÃ©nk');
});


$botman->hears('StatisztikÃ¡m', function ($bot) {
    $user = $bot->getUser(); //User

    $bot->reply('KÃ©rlek vÃ¡rj, elÅ‘keresem Ã©s Ã¶sszegzem a gyakorlÃ¡said, tesztjeid eredmÃ©nyÃ©t..');
    $bot->typesAndWaits(5);
    $bot->reply(
        'http://kresz.bot/statisztika/' . $user->getId() . PHP_EOL .
        'FelhasznÃ¡lÃ³ (ID): ' . $user->getId() . PHP_EOL .
        'Jelszavad: ' . rand(1000,9999)
    );

    $user = $bot->getUser(); //User

    return $bot->reply(ButtonTemplate::create(
        'Az alÃ¡bbi gombra kattintva azonnal belÃ©phetsz:')
        ->addButton(ElementButton::create('Mutasd!')
            ->url('http://kresz.bot/statisztika/'.$user->getId())
        )
    );
});